{
    "swagger": "2.0",
    "info": {
        "description": "Quera Crypto Exchange server",
        "title": "QExchange-System",
        "contact": {
            "name": "Go-Zilla",
            "url": "https://github.com/Quera-Go-Zilla"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/admin/block-user": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "AdminAuth": []
                    }
                ],
                "description": "Blocks a user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Block user",
                "parameters": [
                    {
                        "description": "Block User",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BlockUserRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/admin/unblock-user": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "AdminAuth": []
                    }
                ],
                "description": "Unblocks a user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Unblock user",
                "parameters": [
                    {
                        "description": "Unblock User",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UnblockUserRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/admin/update-auth-level": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "AdminAuth": []
                    }
                ],
                "description": "Updates a user's authentication level",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update user authentication level",
                "parameters": [
                    {
                        "description": "Update Auth Level",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateAuthenticationLevelRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/admin/update-to-admin": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Upgrades a regular user to an admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Upgrade user to admin",
                "parameters": [
                    {
                        "description": "Admin Password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserToAdminRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/admin/user-info": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "AdminAuth": []
                    }
                ],
                "description": "Retrieves information for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/bank/add_account": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Adds a bank account for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/json"
                ],
                "tags": [
                    "Bank"
                ],
                "summary": "Add Bank Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Add Bank Account",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AddBankAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/bank/payment/charge": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Charges a user's account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank"
                ],
                "summary": "Charge Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Charge Account",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChargeAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ChargeAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/bank/payment/get-all": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Retrieves all payments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank"
                ],
                "summary": "Get all payments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PaymentInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/bank/payment/verify": {
            "get": {
                "description": "Verifies a payment transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank"
                ],
                "summary": "Verify Payment",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/bank/payment/withdraw": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Allows a user to withdraw a specified amount from their account balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank"
                ],
                "summary": "Withdraw from Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Withdraw from Account",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.WithdrawFromAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/bank/transaction/get-all": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Retrieves all transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank"
                ],
                "summary": "Get all transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/close-trade": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Closes an existing trade",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trade"
                ],
                "summary": "Close a trade",
                "parameters": [
                    {
                        "description": "Close Trade",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/trade.ClosedTradeRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/close-trade/filter-all": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Filters closed trades based on given criteria",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trade"
                ],
                "summary": "Filter closed trades",
                "parameters": [
                    {
                        "description": "Filter Criteria",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/trade.FilterTradesRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/trade.FilterTradesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/close-trade/get-all": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Retrieves all closed trades for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trade"
                ],
                "summary": "Get all closed trades",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trade.ClosedTrade"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/crypto": {
            "get": {
                "description": "Gets details of a specific cryptocurrency by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Crypto"
                ],
                "summary": "Get cryptocurrency",
                "parameters": [
                    {
                        "description": "Crypto ID",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.GetCryptoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cryptocurrency.CryptoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Updates details of an existing cryptocurrency",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Crypto"
                ],
                "summary": "Update cryptocurrency",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Crypto Update Information",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cryptocurrency.UpdateCryptoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Adds a new cryptocurrency to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Crypto"
                ],
                "summary": "Add new cryptocurrency",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Crypto Information",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cryptocurrency.MakeCryptoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/crypto/get-all": {
            "get": {
                "description": "Retrieves details of all cryptocurrencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Crypto"
                ],
                "summary": "Get all cryptocurrencies",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/cryptocurrency.CryptoResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/future-order": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Sets a future order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trade"
                ],
                "summary": "Set a future order",
                "parameters": [
                    {
                        "description": "Future Order",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/trade.FutureOrderRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Deletes a specified future order belonging to the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trade"
                ],
                "summary": "Delete Future Order",
                "parameters": [
                    {
                        "description": "Delete Future Order",
                        "name": "order_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/trade.DeleteFutureOrderRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the future order successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Order belongs to another user",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/future-order/get-all": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Retrieves all future orders",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trade"
                ],
                "summary": "Get all future orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trade.FutureOrder"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/open-trade": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Opens a new trade",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trade"
                ],
                "summary": "Open a trade",
                "parameters": [
                    {
                        "description": "Open Trade",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/trade.OpenTradeRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/open-trade/get-all": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Retrieves all open trades for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trade"
                ],
                "summary": "Get all open trades",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trade.OpenTrade"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/support/admin/get-active-tickets": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "AdminAuth": []
                    }
                ],
                "description": "Retrieves all active support tickets (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Support"
                ],
                "summary": "Admin: Get active support tickets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SupportTicket"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/support/close-ticket": {
            "patch": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Closes an existing support ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Support"
                ],
                "summary": "Close a support ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "ticket_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/support/get-all-tickets": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Retrieves all support tickets for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Support"
                ],
                "summary": "Get all tickets for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SupportTicket"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/support/get-ticket-messages": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Retrieves all messages for a specific support ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Support"
                ],
                "summary": "Get messages for a support ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "ticket_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SupportTicket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/support/open-ticket": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Opens a new support ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Support"
                ],
                "summary": "Open a support ticket",
                "parameters": [
                    {
                        "description": "Open Ticket",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TicketRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/support/send-message": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Sends a message to a specific support ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Support"
                ],
                "summary": "Send a message to a support ticket",
                "parameters": [
                    {
                        "description": "Send Message",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Logs in a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User Login",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "User Registration",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "cryptocurrency.CryptoResponse": {
            "type": "object",
            "properties": {
                "buy_fee": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sell_fee": {
                    "type": "integer"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "cryptocurrency.MakeCryptoRequest": {
            "type": "object",
            "properties": {
                "current_price": {
                    "type": "integer",
                    "example": 500
                },
                "name": {
                    "type": "string",
                    "example": "SomeCoin"
                },
                "symbol": {
                    "type": "string",
                    "example": "SMC"
                }
            }
        },
        "cryptocurrency.UpdateCryptoRequest": {
            "type": "object",
            "properties": {
                "current_price": {
                    "type": "integer",
                    "example": 510
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": ""
                },
                "symbol": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "handlers.AddBankAccountRequest": {
            "type": "object",
            "properties": {
                "account_number": {
                    "type": "string",
                    "example": "123456"
                },
                "bank_name": {
                    "type": "string",
                    "example": "eghtesad novin"
                },
                "card_number": {
                    "type": "string",
                    "example": "654321"
                },
                "cvv2": {
                    "type": "string",
                    "example": "123"
                },
                "expire_date": {
                    "type": "string",
                    "example": "04/10"
                }
            }
        },
        "handlers.BlockUserRequest": {
            "type": "object",
            "properties": {
                "temporary": {
                    "type": "boolean",
                    "example": false
                },
                "username": {
                    "type": "string",
                    "example": "user1"
                }
            }
        },
        "handlers.ChargeAccountRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                }
            }
        },
        "handlers.ChargeAccountResponse": {
            "type": "object",
            "properties": {
                "payment_url": {
                    "type": "string"
                }
            }
        },
        "handlers.GetCryptoRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "123456"
                },
                "username": {
                    "type": "string",
                    "example": "newUser"
                }
            }
        },
        "handlers.MessageRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "I have a problem"
                },
                "ticket_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "newUser@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                },
                "passwordrepeat": {
                    "type": "string",
                    "example": "123456"
                },
                "username": {
                    "type": "string",
                    "example": "newUser"
                }
            }
        },
        "handlers.TicketRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "I have a problem"
                },
                "subject": {
                    "type": "string",
                    "example": "problem with system"
                },
                "trade_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "handlers.UnblockUserRequest": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "user2"
                }
            }
        },
        "handlers.UpdateAuthenticationLevelRequest": {
            "type": "object",
            "properties": {
                "new_auth_level": {
                    "type": "integer",
                    "example": 0
                },
                "username": {
                    "type": "string",
                    "example": "user2"
                }
            }
        },
        "handlers.UpdateUserToAdminRequest": {
            "type": "object",
            "properties": {
                "admin_password": {
                    "type": "string",
                    "example": "secret"
                }
            }
        },
        "handlers.WithdrawFromAccountRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer",
                    "example": 5000
                },
                "bank_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.PaymentInfo": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "authority": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.SupportTicket": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T15:04:05Z07:00"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TicketMessage"
                    }
                },
                "status": {
                    "type": "integer",
                    "example": 0
                },
                "subject": {
                    "type": "string",
                    "example": "Issue with Trade Execution"
                },
                "trade_id": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-02T15:04:05Z07:00"
                },
                "username": {
                    "type": "string",
                    "example": "user1"
                }
            }
        },
        "models.TicketMessage": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T15:04:05Z07:00"
                },
                "message": {
                    "type": "string",
                    "example": "I encountered an error when trying to execute a trade."
                },
                "sender_username": {
                    "type": "string",
                    "example": "user1"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer",
                    "example": 515
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "method": {
                    "description": "method: false -\u003e withdraw, true -\u003e deposit",
                    "type": "boolean",
                    "example": false
                },
                "service": {
                    "description": "service: 0 -\u003e payment, 1 -\u003e trade",
                    "type": "integer",
                    "example": 1
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "models.UserInfo": {
            "type": "object",
            "properties": {
                "authentication_level": {
                    "description": "User's authentication level",
                    "type": "integer",
                    "example": 0
                },
                "balance": {
                    "description": "User's account balance",
                    "type": "integer",
                    "example": 5000000000
                },
                "banks_names": {
                    "description": "List of user's bank names",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['saman'",
                        " 'sepah']"
                    ]
                },
                "blocked_level": {
                    "description": "User's blocked level",
                    "type": "integer",
                    "example": 0
                },
                "closed_trades": {},
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user1@example.com"
                },
                "is_admin": {
                    "description": "Indicates if user has admin privileges",
                    "type": "boolean",
                    "example": false
                },
                "is_premium": {
                    "description": "Indicates if user has a premium account",
                    "type": "boolean",
                    "example": false
                },
                "open_trades": {},
                "payments": {},
                "phone_number": {
                    "description": "User's phone number",
                    "type": "string",
                    "example": "9876543210"
                },
                "transactions": {},
                "username": {
                    "description": "User's username",
                    "type": "string",
                    "example": "user1"
                }
            }
        },
        "trade.ClosedTrade": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "buy_fee": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "crypto_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "profit": {
                    "type": "integer"
                },
                "sell_fee": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "trade.ClosedTradeRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "trade.DeleteFutureOrderRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "trade.FilterTradesRequest": {
            "type": "object",
            "properties": {
                "crypto_list": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "trade.FilterTradesResponse": {
            "type": "object",
            "properties": {
                "closed_trades": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/trade.ClosedTrade"
                    }
                },
                "crypto_list": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "end": {
                    "type": "string"
                },
                "profit_over_all": {
                    "type": "integer"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "trade.FutureOrder": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "cryptoID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "stopLoss": {
                    "type": "integer"
                },
                "takeProfit": {
                    "type": "integer"
                },
                "targetPrice": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "trade.FutureOrderRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "crypto_id": {
                    "type": "integer"
                },
                "stop_loss": {
                    "type": "integer"
                },
                "take_profit": {
                    "type": "integer"
                },
                "target_price": {
                    "type": "integer"
                }
            }
        },
        "trade.OpenTrade": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "buyFee": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "cryptoID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "stopLoss": {
                    "type": "integer"
                },
                "takeProfit": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "trade.OpenTradeRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "crypto_id": {
                    "type": "integer"
                },
                "stop_loss": {
                    "type": "integer"
                },
                "take_profit": {
                    "type": "integer"
                }
            }
        }
    }
}